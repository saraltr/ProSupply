@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@implements IDisposable
@rendermode InteractiveServer

<div class="top-nav background-image-container">
    @if (!IsHomePage)
    {
        <button class="back-btn" onclick="history.back()">
            <span class="bi bi-chevron-left"> Back</span>
        </button>
    }

    <h2>@FormattedRoute</h2>
    <AuthorizeView>
        <Authorized>
            <a class="login-btn" href="/logout">Logout</a>
        </Authorized>
        <NotAuthorized>
            <a class="login-btn" href="/login">Login</a>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string FormattedRoute = "";
    private bool IsHomePage = false; // check if it's the home page
    private string userName = "";

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += OnLocationChanged;
        await UpdateRouteDisplayAsync();
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await InvokeAsync(UpdateRouteDisplayAsync);
    }

    private async Task UpdateRouteDisplayAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // check if the user is authenticated and get their username
        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name ?? "";
        }

        var uri = NavManager.Uri;
        var path = new Uri(uri).AbsolutePath.Trim('/');

        // check if the current route is the home page
        IsHomePage = string.IsNullOrEmpty(path); // home page if the path is empty

        if (IsHomePage)
        {
            // use the userName if available else use a default message
            FormattedRoute = !string.IsNullOrWhiteSpace(userName)
                ? $"Welcome back, {userName}!"
                : "Welcome to ProSupply!";
        }
        // header for the supplier pages
        else if (path.StartsWith("suppliers/"))
        {
            var supplierSlug = path.Replace("suppliers/", "").Replace("-", " ");

            FormattedRoute = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(supplierSlug);
        }
        else
        {
            switch (true)
            {
                // case for supplier Pages
                case var _ when path.StartsWith("suppliers/"):
                    var supplierSlug = path.Replace("suppliers/", "").Replace("-", " ");
                    FormattedRoute = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(supplierSlug);
                    break;

                // case for order pages
                case var _ when path.StartsWith("order"):
                    FormattedRoute = "Order";
                    break;

                // case for edit pages
                case var _ when path.Contains("edit_"):
                    var editPageName = path.Split('/')[0].Replace("edit_", "").Replace("-", " ");
                    FormattedRoute = $"Edit {CultureInfo.CurrentCulture.TextInfo.ToTitleCase(editPageName)}";
                    break;

                // default case for generic pages
                default:
                    var formattedPath = path.Replace("-", " ");
                    FormattedRoute = char.ToUpper(formattedPath[0]) + formattedPath.Substring(1);
                    break;
            }
        }

        StateHasChanged(); // trigger UI update
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
}
