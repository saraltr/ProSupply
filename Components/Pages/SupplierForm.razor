@page "/create-supplier"
@using CSE_325_group_project.Models
@using Microsoft.AspNetCore.Components.Forms
@using CSE_325_group_project.Controllers
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Data;
@inject ILogger<SupplierForm> Logger
@inject HttpClient Http
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Create Supplier</h3>
<div class="supplier-form">
<EditForm Model="@Supplier" OnValidSubmit="HandleValidSubmit" FormName="SupplierForm">
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Supplier Name</label>
        <InputText @bind-Value="Supplier!.SupplierName" class="form-control" required />
    </div>

    <div class="form-group">
        <label>Phone</label>
        <InputText @bind-Value="Supplier!.SupplierPhone" class="form-control" required />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText type="email" @bind-Value="Supplier!.SupplierEmail" class="form-control" required />
    </div>

    <div class="form-group">
        <label>Address</label>
        <InputText @bind-Value="Supplier!.SupplierAddress" class="form-control" required />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea @bind-Value="Supplier!.SupplierDescription" class="form-control" />
    </div>

    <div class="form-group">
        <label for="supplierLogo">Your Logo</label>
        <InputFile id="supplierLogo" OnChange="HandleFileSelected" />
    </div>

    <div class="form-group">
        <label>Category</label>
        <InputSelect @bind-Value="Supplier!.CategoryId" class="form-control" required>
            <option value="">-- Select Category --</option>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.Category_id">@category.Category_name</option>
                }
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Company</label>
        <InputSelect @bind-Value="Supplier!.CompanyId" class="form-control">
            <option value="">-- Select Company --</option>
            @if (companies != null)
            {
                @foreach (var company in companies)
                {
                    <option value="@company.Company_id">@company.Company_name</option>
                }
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    private Supplier? Supplier { get; set; }

    // stores the name of the uploaded file after saving
    private string? uploadedFileName;
    private int userId;

    // reference to the file selected by the user
    IBrowserFile? file;
    private List<Company>? companies;
    private List<Category>? categories;
    
    // success and error messages
    private string? successMessage;
    private string? errorMessage;


    // Load Companies and Categories
    // extracts the logged-in user's ID from authentication claims
    protected override async Task OnInitializedAsync()
    {
        Supplier ??= new() {};

        // load companies and categories for dropdown selections
        companies = await _dbContext.Companies.ToListAsync();
        categories = await _dbContext.Categories.ToListAsync();

        // get the current authentication state and extract user ID from claims
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var userIdString = user.FindFirst("UserId")?.Value;

        if (int.TryParse(userIdString, out int parsedUserId))
        {
            userId = parsedUserId;
        }
    }
    
    // called when the form is submitted and passes validation
    private async Task HandleValidSubmit()
    {
        try
        {

        if (file == null)
        {
            errorMessage = "Please upload a logo before submitting.";
            successMessage = null;
            StateHasChanged();
            return;
        }

        // set supplier logo path (to be stored in DB) using the file name
        Supplier!.SupplierLogo = Path.Combine("suppliers", file!.Name).Replace("\\", "/");

        Supplier.UserId = userId;

        _dbContext.Suppliers.Add(Supplier);
        await _dbContext.SaveChangesAsync();

        // save to directory
        var path = Path.Combine("wwwroot/uploads/suppliers", file.Name);

        // ensure the uploads folder exists
        Directory.CreateDirectory("wwwroot/uploads");

        using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream); // 10 MB max

        uploadedFileName = file.Name;
        successMessage = $"Supplier '{Supplier.SupplierName}' created successfully.";
        errorMessage = null;

        // clear form after successful submission (optional)
        Supplier = new();
        file = null;

        Navigation.NavigateTo("/profile");

        }
        catch (Exception)
        {
            errorMessage = "An error occurred while creating the supplier. Please try again.";
            successMessage = null;
        }
        StateHasChanged();
    }

    // called when the user selects a file
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
        errorMessage = null; 
    }

}