@page "/quote/{supplierId:int}/{userId:int}"
@using Microsoft.AspNetCore.Components.Forms
@using CSE_325_group_project.Models;
@using CSE_325_group_project.Data;
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject AppDbContext _dbContext
@rendermode InteractiveServer

<PageTitle>Request a Quote</PageTitle>

<AuthorizeView Context="authUser">
    <Authorized>

@if (supplier == null)
{
        <div class="alert alert-danger">
            <strong>Supplier not found.</strong>
        </div>
}
else
{
        <h3 class="text-center mt-4 mb-4">
            Request a Quote from @supplier.SupplierName
        </h3>


    <EditForm Model="Quote" OnValidSubmit="SubmitQuote">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="serviceDescription" class="form-label">
                <strong>Service Description</strong>
            </label>
            <textarea id="serviceDescription" class="form-control" @bind="Quote.QuoteDetails"
                placeholder="Describe your requirements here" rows="4"></textarea>
        </div>

        <div class="form-group">
            <label for="quoteNotes" class="form-label pt-2">
                <strong>Additional Notes</strong>
            </label>
            <textarea id="quoteNotes" class="form-control" @bind="Quote.QuoteNotes" placeholder="Provide any extra details"
                rows="4"></textarea>
        </div>

        <div class="form-group text-center mt-4">
            <button type="submit" class="btn btn-primary btn-lg">Request a Quote</button>
        </div>
    </EditForm>

}

    </Authorized>
    <NotAuthorized>
        <h3>You will be redirected to the login page</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public int supplierId { get; set; }
    [Parameter] public int userId { get; set; }

    private Supplier? supplier;
    private User? user;
    private Quote? Quote {get; set;}

    protected override async Task OnInitializedAsync()
    {
        // Fetch the supplier data
        supplier = await _dbContext.Suppliers
            .Include(s => s.Services)
            .FirstOrDefaultAsync(s => s.SupplierId == supplierId);

        // initialize the current quote with default values
        if (supplier != null)
        {
            Quote = new Quote
            {
                SupplierId = supplier.SupplierId,
                UserId = userId,
                QuoteDetails = string.Empty,
                QuoteNotes = string.Empty,
                QuoteDate = DateTime.UtcNow,
                QuoteStatus = 1
            };
        }
    }


    private async Task SubmitQuote()
    {
        // ensure that we have valid data
        if (Quote == null)
        {
            return;
        }

        // add the order to the DB
        _dbContext.Quotes.Add(Quote);
        
        try
        {
            await _dbContext.SaveChangesAsync();
        }
        catch (DbUpdateException ex)
        {
            var innerException = ex.InnerException?.Message ?? "No inner exception.";
            @* Console.WriteLine($"Error while saving order: {innerException}"); *@
            throw;
        }

        // redirect after placing order
        Navigation.NavigateTo($"quote-success/{Quote.QuoteId}");
    }

    private bool isRedirecting = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isRedirecting)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // if the user is not authenticated redirect to the login page
            if (!user.Identity?.IsAuthenticated ?? true)
            {
                isRedirecting = true;
                Navigation.NavigateTo("/login");
            }
        }
    }
}
