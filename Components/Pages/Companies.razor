@page "/companies"
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Models;
@using CSE_325_group_project.Data;
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS 
@* gives opportunity to events being fired *@
@rendermode InteractiveServer
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Companies</PageTitle>
<div>
    <SearchBar OnSearch="PerformSearch" />
</div>

@* <div>
    <FilterComponent     TItem="Industry"
                 Label="Filter by Industry"
                 Items="@industries"
                 GetId="ind => ind.Industry_id"
                 GetName="ind => ind.Industry_Name"
                 OnSelectedChanged="OnIndustrySelected"/>
</div> *@
<div>
    <button @onclick="GoBack" class="back-button">
    <i class="fas fa-arrow-left"></i> Back
    </button>
</div>




@if (companies != null)
{
 <ul class="companies-card-list">
        @foreach (var company in companies)
        {
           // <li><strong>@company.company_name</strong> - @company.company_email <a href="/edit_company/@company.company_id">EDIT</a></li>
<div class="company-card">
<AuthorizeView Roles="Admin,Manager">
    <Authorized>    
    <div class="card-actions">
        <a href="/edit_company/@company.Company_id" class="action-btn edit-icon">
            <i class="fas fa-edit"></i>
        </a>
        <button class="action-btn delete-btn" @onclick="() => ShowConfirmDialog(company.Company_id)">
            <i class="fas fa-trash"></i>
        </button>
    </div>
    </Authorized>
</AuthorizeView >
     

    <img src="@company.Img_url" alt="@company.Company_name" class="company-logo" />

    <h2>@company.Company_name</h2>

    <p><strong>Industry:</strong> <span class="industry">@GetIndustryName(company.Industry_id)</span></p>

    <a href="/company/@company.Company_id">More Info</a>
</div>
        }
    </ul> 

    <ConfirmationDialog @ref="_confirmationDialog" OnConfirm="HandleConfirm" />


}
@code{
  @* gets the companies list *@
    private List<Company> companies = new();
    private List<Company> fetchedCompanies = new();

    private List<Industry>  fetchedIndustries = new(); 

    private List<Industry>  industries = new();    
        
    private int companyIdToDelete;

    private string searchTerm = "";
    private Guid inputKey = Guid.NewGuid();
    private List<Company> filteredCompanies = new();

    

        private void PerformSearch(string term)
    {
        Console.WriteLine(term);
        searchTerm = term;
        filteredCompanies = companies
            .Where(c => c.Company_name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();


        companies = filteredCompanies;
       
        StateHasChanged();
    }

    private void OnIndustrySelected(int id){
        filteredCompanies = companies
            .Where(c => c.Industry_id == id)
            .ToList();
            companies = filteredCompanies;
    }
    private async void GoBack()
     {
        Console.WriteLine("I will go back");
        companies = fetchedCompanies;
        
        
    }

    private ConfirmationDialog _confirmationDialog;  

    protected override async Task OnInitializedAsync()
    {
       
        fetchedCompanies = await _dbContext.Companies.ToListAsync();
        companies = fetchedCompanies;
        fetchedIndustries = await _dbContext.Industries.ToListAsync();
        industries = fetchedIndustries;
        
    }
  
   

     private void ShowConfirmDialog(int companyId)
    {
       Console.WriteLine("I will open Confirm Window HEEELLLLOOOOO");
        _confirmationDialog.Show();
        companyIdToDelete = companyId;
    }

    private void CloseDialog()
    {
         _confirmationDialog.Hide();
    }

    private async void HandleConfirm(bool confirmed)
    {
        // Logic to delete the company from the database
        var companyToDelete = companies.FirstOrDefault(c => c.Company_id == companyIdToDelete);
        
         if (confirmed){
            if (companyToDelete != null)
        {
            _dbContext.Companies.Remove(companyToDelete);
            await _dbContext.SaveChangesAsync();
            companies = companies.Where(c => c.Company_id != companyIdToDelete).ToList();
            
        }
    }

        CloseDialog();
        
        StateHasChanged();
        
    }

 string GetIndustryName(int industryId)
{
    

    foreach (var ind in industries)
    {
        

        if (ind.Industry_id == industryId)
        {
            return ind.Industry_Name;
        }
    }

    return "Industry not found";
}

    private void CancelDelete()
    {
        CloseDialog();
    }
        
        
        }