@page "/edit-quote/{quoteId:int}"
@using CSE_325_group_project.Models
@using CSE_325_group_project.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode RenderMode.InteractiveServer

<PageTitle>Edit Your Quote</PageTitle>

@if (quote == null)
{
    <p>Quote not found.</p>
}
else
{
    @if (isSuccess)
    {
        <div class="alert alert-success mt-3">
            <strong>Success!</strong> Your quote has been updated successfully.
        </div>
    }
    <EditForm Model="quote" OnValidSubmit="SaveChanges" FormName="EditQuote" class="quoteEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <legend>
                <h3>Edit Quote</h3>
            </legend>

        <div class="mb-3">
            <label for="serviceDescription"><strong>Service Description</strong></label>
            <InputText id="serviceDescription" class="form-control" @bind-Value="quote.QuoteDetails"
                placeholder="Describe your requirements here" rows="4" />
        </div>

        <div class="mb-3">
            <label for="quoteNotes"><strong>Additional Notes</strong></label>
            <InputText id="quoteNotes" class="form-control" @bind-Value="quote.QuoteNotes" />
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-success">Save Changes</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel Modifications</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteOrder"><i class="bi bi-trash"></i> Delete
            Order</button>
        </div>
        </fieldset>
    </EditForm>
}

@code {
    @* gets the orderId from the url *@
    [Parameter] public int quoteId { get; set; }
    private NewOrder? order;
    private Quote? quote;
    private bool isSuccess = false;

    @* this method runs when the component is initialized *@
    @* it retrieves the order from the database based on the passed orderId *@
    protected override async Task OnInitializedAsync()
    {
        quote = await _dbContext.Quotes.FindAsync(quoteId);

        @* if the order is found, mark the entry as modified to track changes *@
        if (quote != null)
        {
            _dbContext.Entry(quote).State = EntityState.Modified;
        }
        @* Console.WriteLine($"Entity State on load: {_dbContext.Entry(order).State}"); *@
    }

    @* this method is called when the form is submitted to save the changes *@
    private async Task SaveChanges()
    {
        if (quote != null)
        {
            @* ensure the date is still passed as UTC *@
            @* postgreSQL expects DateTime with DateTimeKind.Utc *@
            if (quote.QuoteDate.Kind == DateTimeKind.Unspecified)
            {
                quote.QuoteDate = DateTime.SpecifyKind(quote.QuoteDate, DateTimeKind.Utc);
            }

            @* Console.WriteLine($"OrderCity before SaveChanges: {order.OrderCity}"); *@

            @* apply the changes to the db *@
            _dbContext.Quotes.Update(quote);
            @* _dbContext.Entry(order).State = EntityState.Modified; *@
            await _dbContext.SaveChangesAsync();


            isSuccess = true;

            @* re-render the component *@
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo($"/history");
    }

    private async void DeleteOrder()
    {
        var confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this quote?");
        if (confirmDelete)
        {
            quote.QuoteStatus = 5;
            quote.QuoteDate = DateTime.SpecifyKind(quote.QuoteDate, DateTimeKind.Utc);
            _dbContext.Quotes.Update(quote);
            await _dbContext.SaveChangesAsync();
            Navigation.NavigateTo("/history?deleted=true");
        }
    }
}