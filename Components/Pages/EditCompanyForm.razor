@page "/edit_company/{id}"
@using CSE_325_group_project.Models
@using Microsoft.AspNetCore.Components.Forms
@using CSE_325_group_project.Controllers
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Data;
@inject ILogger<CompanyForm> Logger
@inject HttpClient Http
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


@rendermode RenderMode.InteractiveServer //helps to rerender after input changed

<div class="company-form">
 <EditForm Model="@Company" OnValidSubmit="HandleSubmit" FormName="EditCompanyForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
<a href="/data" class="close-icon"><i class="fas fa-times"></i></a>
    <div class="form-group">
        <label for="CompanyName">Company Name</label>
        <input id="CompanyName" 
                   class="form-control" 
                   @bind-Value="Company!.Company_name" @bind-Value:event="oninput" />
       
    </div>

    <div class="form-group">
        <label for="CompanyPhone">Phone</label>
        <InputText id="CompanyPhone" 
                   class="form-control" 
                   @bind-Value="Company.Company_phone" />
    </div>

    <div class="form-group">
        <label for="CompanyEmail">Email</label>
        <InputText type="email" 
                   id="CompanyEmail" 
                   class="form-control" 
                   @bind-Value="Company.Company_email" />
    </div>

    <div class="form-group">
        <label for="CompanyAddress">Address</label>
        <InputText id="CompanyAddress" 
                   class="form-control" 
                   @bind-Value="Company.Company_address" />
    </div>

    <div class="form-group">
        <label for="CompanyDescription">Description</label>
        <InputText id="CompanyDescription" 
                    class="form-control"
                    @bind-Value="Company.Company_description" />
    </div>

<div class="form-group">
        <label for="ImgUrl">ImgUrl</label>
        <InputText id="ImgUrl" 
                   class="form-control" 
                   @bind-Value="@companyFileName" />
    </div>
     <InputFile OnChange="HandleFileSelected" />

        @if (uploadedFileName != null)
        {
            <p>Uploaded file: @uploadedFileName</p>
        }

     <div class="form-group">
    <label for="IndustrySelect">Industry</label>
    <select id="IndustrySelect" class="form-control" @bind="Company!.Industry_id">
        <option value="">-- Please choose --</option>
        @foreach (var ind in industries)
        {
            <option value="@ind.Industry_id">@ind.Industry_Name</option>       
        }
    </select>
    </div>

   

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
</div>

@code {
    [Parameter]
    public string id { get; set; } // Capture the id from the URL

    [SupplyParameterFromForm]
    private Company? Company { get; set; }
    IBrowserFile file;
    private string? companyFileName;
    private string? uploadedFileName;
    private List<Industry> industries = new ();
    private List<Industry> fetchedIndustries = new ();
   

    private int userId;

   // private Company? CompanyEdit { get; set; }
    // Simulating fetching data from a service or database
    protected override async Task OnInitializedAsync()
    {
       
        // Here you would typically fetch the company data using the id
   
        // For example, calling a service like: await CompanyService.GetCompanyByIdAsync(id);
        Company ??= new() {Company_name = "Initial"};
       // CompanyEdit ??=new() {};
        // Simulating fetching company data
        Company  = await GetCompanyByIdAsync(id);

        fetchedIndustries = await _dbContext.Industries.ToListAsync();
        industries = fetchedIndustries;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var userIdString = user.FindFirst("UserId")?.Value;

        if (int.TryParse(userIdString, out int parsedUserId))
        {
            userId = parsedUserId;
            
        }
        companyFileName = Company.Img_url;
               
    }

    // Simulate fetching company data based on the id
    private async Task<Company?> GetCompanyByIdAsync(string id)
    {

        Company company = await _dbContext.Companies.FirstOrDefaultAsync(c => c.Company_id == int.Parse(id));
        // This is where you would fetch from a real API or database
       

        return company;
    }

    private async Task HandleSubmit(){

         


        Company.Img_url = Path.Combine("uploads", file.Name).Replace("\\", "/");
        Company.User_id = userId;

        

        // Optional: Save to disk
        var path = Path.Combine("wwwroot/uploads", file.Name);

        // Ensure the uploads folder exists
        Directory.CreateDirectory("wwwroot/uploads");

        using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream); // 10 MB max
        uploadedFileName = file.Name;
        //companyFileName = uploadedFileName;
        StateHasChanged();

        _dbContext.Companies.Update(Company);
        await _dbContext.SaveChangesAsync();
        Console.WriteLine($"Company Info Updated: Name: {Company.Company_name}, Email: {Company.Company_email}, Address: {Company.Company_address}");
        
        
        Navigation.NavigateTo("/companies");
        StateHasChanged();
        
        
    }

     private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
        companyFileName = file.Name;
        
    }
    

       

    private void CancelEdit()
    {
        // Handle cancel logic (for example, navigate away or reset the form)
        Console.WriteLine("Edit canceled");
    }
}