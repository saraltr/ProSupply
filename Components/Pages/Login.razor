@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Models
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<PageTitle>Login Page - ProSupply</PageTitle>

<div class="loginPage">
    <EditForm Model="loginModel" OnSubmit="HandleLogin" FormName="LoginForm" class="loginForm shadow-sm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <fieldset>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
            <legend class="text-center"><h3><strong>Welcome back!</strong></h3></legend>

            <div class="mb-3">
                <label for="username"><i class="fas fa-user"></i> Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
                <small class="form-text text-white">
                    You can log in with your username OR email.
                </small>

            </div>

            <div class="mb-3">
                <label for="email"><i class="fas fa-envelope"></i> Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
                <small class="form-text text-white">
                    You can log in with your username OR email.
                </small>
            </div>

            <div class="mb-3">
                <label for="password"><i class="fas fa-lock"></i> Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
                
            </div>
        </fieldset>

        <div class="login-actions text-center">
            <button type="submit" class="login btn m-3">Login</button>
            <p>Don't have an account? <a href="/register" class="btn btn-outline-info">Register</a></p>
        </div>
        
    </EditForm>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;
    private HttpClient HttpClient => HttpClientFactory.CreateClient("API");

    protected override void OnInitialized()
    {
        // ensure the model is initialized
        loginModel = new LoginModel();
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        // debugging
        //Console.WriteLine($"Login attempt: Username = '{loginModel.Username}', Password = '{loginModel.Password}'");
        //Console.WriteLine($"Username: '{loginModel.Username}', Email: '{loginModel.Email}', Password: '{loginModel.Password}'"); 


        if (string.IsNullOrEmpty(loginModel.Username) && string.IsNullOrEmpty(loginModel.Email) ||
        string.IsNullOrEmpty(loginModel.Password))
        {
            errorMessage = "Please enter either a username or email, and password.";
            return;
        }


        try
        {
            var response = await HttpClient.PostAsJsonAsync("/api/auth/sign-in", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                    if (result is not null)
                    {
                        // store token
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                        // set the authorization header for this client
                        HttpClient.DefaultRequestHeaders.Authorization =
                        new AuthenticationHeaderValue("Bearer", result.Token);

                        // notify the app about login
                        var customAuthProvider = (CustomAuthenticationStateProvider)AuthProvider;
                        customAuthProvider.MarkUserAsAuthenticated(result.Token);

                        // redirect
                        NavigationManager.NavigateTo("/");

                    }
                    else
                    {
                        // log or handle unexpected null result
                        errorMessage = "Internal error: LoginResponse was unexpectedly null. Try again later.";
                    }

            }

            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = errorResponse?.Message ?? "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}
