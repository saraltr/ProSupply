@page "/create-company"
@using CSE_325_group_project.Models
@using Microsoft.AspNetCore.Components.Forms
@using CSE_325_group_project.Controllers
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Data;
@inject ILogger<CompanyForm> Logger
@inject HttpClient Http
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Create Company</h2>
<div class="company-form">
<EditForm Model="@Company" OnValidSubmit="HandleValidSubmit" FormName="CompanyForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="CompanyName">Company Name</label>
        <InputText id="CompanyName" class="form-control" @bind-Value="Company!.Company_name" />
        @* <ValidationMessage For="@(() => Company!.company_name)" /> *@
    </div>

    <div class="form-group">
        <label for="CompanyPhone">Phone</label>
        <InputText id="CompanyPhone" class="form-control" @bind-Value="Company!.Company_phone" />
        <ValidationMessage For="@(() => Company.Company_phone)" />
    </div>

    <div class="form-group">
        <label for="CompanyEmail">Email</label>
        <InputText type="email" id="CompanyEmail" class="form-control" @bind-Value="Company!.Company_email"  />
        <ValidationMessage For="@(() => Company.Company_email)" />
    </div>

    <div class="form-group">
        <label for="CompanyAddress">Address</label>
        <InputText id="CompanyAddress" class="form-control" @bind-Value="Company!.Company_address"  />
        <ValidationMessage For="@(() => Company.Company_address)" />
    </div>

    <div class="form-group">
    <label for="CompanyDescription">Description</label>
    <InputTextArea id="CompanyDescription" class="form-control" @bind-Value="Company!.Company_description" rows="5" />
        <ValidationMessage For="@(() => Company.Company_description)" />
</div>



    <InputFile OnChange="HandleFileSelected" />

        @if (uploadedFileName != null)
        {
            <p>Uploaded file: @uploadedFileName</p>
        }

    @* <div class="form-group">
        <label for="IndustryId">Industry ID</label>
        <InputNumber id="IndustryId" class="form-control" @bind-Value="Company!.Industry_id"  />
       
    </div> *@

   <div class="form-group">
    <label for="IndustrySelect">Industry</label>
    <select id="IndustrySelect" class="form-control" @bind="Company!.Industry_id">
        <option value="">-- Please choose --</option>
        @foreach (var ind in industries)
        {
            <option value="@ind.Industry_id">@ind.Industry_Name</option>       
        }
    </select>
</div>

   

<button type="submit" class="btn btn-primary" disabled="@isSubmitting">
    @(isSubmitting ? "Submitting..." : "Submit")
</button>
    @if (isSubmitting)
{
    <div class="alert alert-info mt-3">@submitMessage</div>
}
</EditForm>
</div>

@code {


    

        
   
   [SupplyParameterFromForm]
    private Company? Company { get; set; }
    IBrowserFile file;
    private string? uploadedFileName;
    private int userId;
    private List<Industry> industries = new ();
    private List<Industry> fetchedIndustries = new ();

    private bool isSubmitting = false;
    private string submitMessage = "";


    protected override async Task OnInitializedAsync()
      { 
        Company ??= new() { };
        fetchedIndustries = await _dbContext.Industries.ToListAsync();
        industries = fetchedIndustries;

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        var userIdString = user.FindFirst("UserId")?.Value;

        if (int.TryParse(userIdString, out int parsedUserId))
        {
            userId = parsedUserId;
            
        }
      
    
  
      }
    

    private async Task HandleValidSubmit()
{
    isSubmitting = true;
    submitMessage = "Submitting company info, please wait...";
    StateHasChanged();

    try
    {
        Company.Img_url = Path.Combine("uploads", file.Name).Replace("\\", "/");
        Company.User_id = userId;

        _dbContext.Companies.Add(Company);
        await _dbContext.SaveChangesAsync();

        var path = Path.Combine("wwwroot/uploads", file.Name);
        Directory.CreateDirectory("wwwroot/uploads");

        using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024).CopyToAsync(stream); // Increased to 100 MB max

        uploadedFileName = file.Name;

        submitMessage = "Company successfully created!";
        StateHasChanged();

        await Task.Delay(1000); // Optional pause before redirect
        Navigation.NavigateTo("/companies");
    }
    catch (Exception ex)
    {
        submitMessage = $"An error occurred: {ex.Message}";
        Console.WriteLine(ex);
    }
    finally
    {
        isSubmitting = false;
        StateHasChanged();
    }
}
    

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;

        
    }
}





    
