@page "/create-company"
@using CSE_325_group_project.Models
@using Microsoft.AspNetCore.Components.Forms
@using CSE_325_group_project.Controllers
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Data;
@inject ILogger<CompanyForm> Logger
@inject HttpClient Http
@inject AppDbContext _dbContext

<h2>Create Company</h2>
<div class="company-form">
<EditForm Model="@Company" OnValidSubmit="HandleValidSubmit" FormName="CompanyForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="CompanyName">Company Name</label>
        <InputText id="CompanyName" class="form-control" @bind-Value="Company!.Company_name" />
        @* <ValidationMessage For="@(() => Company!.company_name)" /> *@
    </div>

    <div class="form-group">
        <label for="CompanyPhone">Phone</label>
        <InputText id="CompanyPhone" class="form-control" @bind-Value="Company!.Company_phone" />
        <ValidationMessage For="@(() => Company.Company_phone)" />
    </div>

    <div class="form-group">
        <label for="CompanyEmail">Email</label>
        <InputText type="email" id="CompanyEmail" class="form-control" @bind-Value="Company!.Company_email"  />
        <ValidationMessage For="@(() => Company.Company_email)" />
    </div>

    <div class="form-group">
        <label for="CompanyAddress">Address</label>
        <InputText id="CompanyAddress" class="form-control" @bind-Value="Company!.Company_address"  />
        <ValidationMessage For="@(() => Company.Company_address)" />
    </div>

    <div class="form-group">
        <label for="CompanyDescription">Description</label>
        <InputText id="CompanyDescription" class="form-control" @bind-Value="Company!.Company_description" />
    </div>



    <InputFile OnChange="HandleFileSelected" />

        @if (uploadedFileName != null)
        {
            <p>Uploaded file: @uploadedFileName</p>
        }

    @* <div class="form-group">
        <label for="IndustryId">Industry ID</label>
        <InputNumber id="IndustryId" class="form-control" @bind-Value="Company!.Industry_id"  />
       
    </div> *@

   <div class="form-group">
    <label for="IndustrySelect">Industry</label>
    <select id="IndustrySelect" class="form-control" @bind="Company!.Industry_id">
        <option value="">-- Please choose --</option>
        @foreach (var ind in industries)
        {
            <option value="@ind.Industry_id">@ind.Industry_Name</option>       
        }
    </select>
</div>

    <div class="form-group">
        <label for="UserId">User ID</label>
        <InputNumber id="UserId" class="form-control" @bind-Value="Company!.User_id"  />
        @* <ValidationMessage For="@(() => Company.user_id)" /> *@
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>
</div>

@code {


    

        
   
   [SupplyParameterFromForm]
    private Company? Company { get; set; }

    IBrowserFile file;

    private List<Industry> industries = new ();
    private List<Industry> fetchedIndustries = new ();
     protected override async Task OnInitializedAsync()
      { 
        Company ??= new() { };
        fetchedIndustries = await _dbContext.Industries.ToListAsync();
        industries = fetchedIndustries;
    
  
      }
    

    private async void HandleValidSubmit()
    {
        // Your form submission logic
        Company.Img_url = Path.Combine("uploads", file.Name).Replace("\\", "/");
        _dbContext.Companies.Add(Company);
        await _dbContext.SaveChangesAsync(); 

        // Optional: Save to disk
        var path = Path.Combine("wwwroot/uploads", file.Name);

        // Ensure the uploads folder exists
        Directory.CreateDirectory("wwwroot/uploads");

        using var stream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream); // 10 MB max

        uploadedFileName = file.Name;      
        

    }

    private string? uploadedFileName;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;

        
    }
}




    @* string GetIndustryName(int industryId)
{
    Console.WriteLine(industryId);

    foreach (var ind in industries)
    {
        Console.WriteLine(ind.Industry_Name);

        if (ind.Industry_id == industryId)
        {
            return ind.Industry_Name;
        }
    }

    return "Industry not found";
} *@

    
}