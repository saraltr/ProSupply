@page "/companies"
@using Microsoft.EntityFrameworkCore
@using CSE_325_group_project.Models;
@using CSE_325_group_project.Data;
@inject AppDbContext _dbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS 
@* gives opportunity to events being fired *@
@rendermode InteractiveServer
@inject HttpClient HttpClient




<h3>Companies List</h3>

@if (companies != null)
{
 <ul class="companies-card-list">
        @foreach (var company in companies)
        {
           // <li><strong>@company.company_name</strong> - @company.company_email <a href="/edit_company/@company.company_id">EDIT</a></li>
        <div class="company-card">
            <a href="/edit_company/@company.Company_id" class="edit-icon"><i class="fas fa-edit"></i></a>
            <button class="btn btn-danger" @onclick="() => ShowConfirmDialog(company.Company_id)">
                        <i class="fas fa-trash"></i></button>
    
            <h2>@company.Company_name</h2>
            <p><strong>Phone:</strong> @company.Company_phone</p>
            <p><strong>Email:</strong> @company.Company_email</p>
            <p><strong>Address:</strong> @company.Company_address</p>
            <p><strong>Description:</strong> @(string.IsNullOrEmpty(company.Company_description) ? "No description available" : company.Company_description)</p>
            <p><strong>Industry:</strong> <span class="industry">@GetIndustryName(company.Industry_id)</span></p>
        </div>
        }
    </ul> 

    <ConfirmationDialog @ref="_confirmationDialog" OnConfirm="HandleConfirm" />


}
@code{
  @* gets the companies list *@
    private List<Company> companies = new();
        
    private int companyIdToDelete;

    

    private ConfirmationDialog _confirmationDialog;  

    protected override async Task OnInitializedAsync()
    {
       
        companies = await _dbContext.Companies.ToListAsync();
    }
  
    string GetIndustryName(int industryId)
        {
            string[] industryList = { "Technology", "Manufacturing", "Retail", "Healthcare", "Automotive", "Food & Beverage" };
            return industryId >= 1 && industryId <= industryList.Length ? industryList[industryId - 1] : "Unknown";
        }

     private void ShowConfirmDialog(int companyId)
    {
       Console.WriteLine("I will open Confirm Window HEEELLLLOOOOO");
        _confirmationDialog.Show();
        companyIdToDelete = companyId;
    }

    private void CloseDialog()
    {
         _confirmationDialog.Hide();
    }

    private async void HandleConfirm(bool confirmed)
    {
        // Logic to delete the company from the database
        var companyToDelete = companies.FirstOrDefault(c => c.Company_id == companyIdToDelete);
        
         if (confirmed){
            if (companyToDelete != null)
        {
            _dbContext.Companies.Remove(companyToDelete);
            await _dbContext.SaveChangesAsync();
        }
    }

        CloseDialog();
        StateHasChanged();
    }

 

    private void CancelDelete()
    {
        CloseDialog();
    }
        
        
        }